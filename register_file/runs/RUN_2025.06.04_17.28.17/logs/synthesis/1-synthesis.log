
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/register_file/src/register_file.v
Parsing SystemVerilog input from `/openlane/designs/register_file/src/register_file.v' to AST representation.
Storing AST representation for module `$abstract\register_file'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/register_file/src/alu.v
Parsing SystemVerilog input from `/openlane/designs/register_file/src/alu.v' to AST representation.
Storing AST representation for module `$abstract\alu'.
Successfully finished Verilog frontend.

4. Executing HIERARCHY pass (managing design hierarchy).

5. Executing AST frontend in derive mode using pre-parsed AST for module `\register_file'.
Generating RTLIL representation for module `\register_file'.

5.1. Analyzing design hierarchy..
Top module:  \register_file

5.2. Analyzing design hierarchy..
Top module:  \register_file
Removing unused module `$abstract\alu'.
Removing unused module `$abstract\register_file'.
Removed 2 unused modules.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/hierarchy.dot'.
Dumping module register_file to page 1.
Renaming module register_file to register_file.

7. Executing TRIBUF pass.

8. Executing HIERARCHY pass (managing design hierarchy).

8.1. Analyzing design hierarchy..
Top module:  \register_file

8.2. Analyzing design hierarchy..
Top module:  \register_file
Removed 0 unused modules.

9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

10. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/openlane/designs/register_file/src/register_file.v:14$2 in module register_file.
Removed a total of 0 dead cases.

11. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 5 assignments to connections.

12. Executing PROC_INIT pass (extract init attributes).

13. Executing PROC_ARST pass (detect async resets in processes).

14. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~1 debug messages>

15. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:20$11'.
Creating decoders for process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
     1/3: $1$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$10
     2/3: $1$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_DATA[31:0]$9
     3/3: $1$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_ADDR[4:0]$8

16. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\register_file.\rd1' from process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:20$11'.
No latch inferred for signal `\register_file.\rd2' from process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:20$11'.

17. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_ADDR' using process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
  created $dff cell `$procdff$27' with positive edge clock.
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_DATA' using process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
  created $dff cell `$procdff$28' with positive edge clock.
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN' using process `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
  created $dff cell `$procdff$29' with positive edge clock.

18. Executing PROC_MEMWR pass (convert process memory writes to cells).

19. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `register_file.$proc$/openlane/designs/register_file/src/register_file.v:20$11'.
Found and cleaned up 1 empty switch in `\register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
Removing empty process `register_file.$proc$/openlane/designs/register_file/src/register_file.v:14$2'.
Cleaned up 1 empty switch.

20. Executing CHECK pass (checking for obvious problems).
Checking module register_file...
Found and reported 0 problems.

21. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.
<suppressed ~3 debug messages>

22. Executing FLATTEN pass (flatten design).

23. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 3 unused cells and 16 unused wires.
<suppressed ~4 debug messages>

25. Executing OPT pass (performing simple optimizations).

25.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

25.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

25.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

25.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
    Consolidated identical input bits for $mux cell $procmux$19:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5
      New ports: A=1'0, B=1'1, Y=$0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0]
      New connections: $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [31:1] = { $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] $0$memwr$\ram$/openlane/designs/register_file/src/register_file.v:16$1_EN[31:0]$5 [0] }
  Optimizing cells in module \register_file.
Performed a total of 1 changes.

25.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

25.6. Executing OPT_DFF pass (perform DFF optimizations).

25.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

25.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

25.9. Rerunning OPT passes. (Maybe there is more to do..)

25.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

25.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

25.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

25.13. Executing OPT_DFF pass (perform DFF optimizations).

25.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

25.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

25.16. Finished OPT passes. (There is nothing left to do.)

26. Executing FSM pass (extract and optimize FSM).

26.1. Executing FSM_DETECT pass (finding FSMs in design).

26.2. Executing FSM_EXTRACT pass (extracting FSM from design).

26.3. Executing FSM_OPT pass (simple optimizations of FSMs).

26.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

26.5. Executing FSM_OPT pass (simple optimizations of FSMs).

26.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

26.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

26.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

27. Executing OPT pass (performing simple optimizations).

27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

27.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

27.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

27.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

27.6. Executing OPT_DFF pass (perform DFF optimizations).

27.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

27.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

27.9. Finished OPT passes. (There is nothing left to do.)

28. Executing WREDUCE pass (reducing word size of cells).

29. Executing PEEPOPT pass (run peephole optimizers).

30. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

31. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module register_file:
  created 0 $alu and 0 $macc cells.

32. Executing SHARE pass (SAT-based resource sharing).
Found 2 cells in module register_file that may be considered for resource sharing.
  Analyzing resource sharing options for $memrd$\ram$/openlane/designs/register_file/src/register_file.v:22$16 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$/openlane/designs/register_file/src/register_file.v:22$15_Y.
    Found 1 candidates: $memrd$\ram$/openlane/designs/register_file/src/register_file.v:21$13
    Analyzing resource sharing with $memrd$\ram$/openlane/designs/register_file/src/register_file.v:21$13 ($memrd):
      Found 1 activation_patterns using ctrl signal $eq$/openlane/designs/register_file/src/register_file.v:21$12_Y.
      Activation pattern for cell $memrd$\ram$/openlane/designs/register_file/src/register_file.v:22$16: $eq$/openlane/designs/register_file/src/register_file.v:22$15_Y = 1'0
      Activation pattern for cell $memrd$\ram$/openlane/designs/register_file/src/register_file.v:21$13: $eq$/openlane/designs/register_file/src/register_file.v:21$12_Y = 1'0
      Size of SAT problem: 0 cells, 27 variables, 51 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $eq$/openlane/designs/register_file/src/register_file.v:22$15_Y $eq$/openlane/designs/register_file/src/register_file.v:21$12_Y } = 2'00
  Analyzing resource sharing options for $memrd$\ram$/openlane/designs/register_file/src/register_file.v:21$13 ($memrd):
    Found 1 activation_patterns using ctrl signal $eq$/openlane/designs/register_file/src/register_file.v:21$12_Y.
    No candidates found.

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

33.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

33.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

33.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

33.6. Executing OPT_DFF pass (perform DFF optimizations).

33.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

33.9. Finished OPT passes. (There is nothing left to do.)

34. Executing MEMORY pass.

34.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

34.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

34.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing register_file.ram write port 0.

34.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

34.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\ram'[0] in module `\register_file': no output FF found.
Checking read port `\ram'[1] in module `\register_file': no output FF found.
Checking read port address `\ram'[0] in module `\register_file': no address FF found.
Checking read port address `\ram'[1] in module `\register_file': no address FF found.

34.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

34.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory register_file.ram by address:

34.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

34.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

34.10. Executing MEMORY_COLLECT pass (generating $mem cells).

35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.
<suppressed ~3 debug messages>

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

36.3. Executing OPT_DFF pass (perform DFF optimizations).

36.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

36.5. Finished fast OPT passes.

37. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \ram in module \register_file:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.

38. Executing OPT pass (performing simple optimizations).

38.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.
<suppressed ~10 debug messages>

38.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

38.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

38.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

38.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

38.6. Executing OPT_SHARE pass.

38.7. Executing OPT_DFF pass (perform DFF optimizations).

38.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

38.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

38.10. Rerunning OPT passes. (Maybe there is more to do..)

38.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~34 debug messages>

38.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

38.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

38.14. Executing OPT_SHARE pass.

38.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\ram[9]$53 ($dff) from module register_file (D = \wd3, Q = \ram[9]).
Adding EN signal on $memory\ram[8]$51 ($dff) from module register_file (D = \wd3, Q = \ram[8]).
Adding EN signal on $memory\ram[7]$49 ($dff) from module register_file (D = \wd3, Q = \ram[7]).
Adding EN signal on $memory\ram[6]$47 ($dff) from module register_file (D = \wd3, Q = \ram[6]).
Adding EN signal on $memory\ram[5]$45 ($dff) from module register_file (D = \wd3, Q = \ram[5]).
Adding EN signal on $memory\ram[4]$43 ($dff) from module register_file (D = \wd3, Q = \ram[4]).
Adding EN signal on $memory\ram[3]$41 ($dff) from module register_file (D = \wd3, Q = \ram[3]).
Adding EN signal on $memory\ram[31]$97 ($dff) from module register_file (D = \wd3, Q = \ram[31]).
Adding EN signal on $memory\ram[30]$95 ($dff) from module register_file (D = \wd3, Q = \ram[30]).
Adding EN signal on $memory\ram[2]$39 ($dff) from module register_file (D = \wd3, Q = \ram[2]).
Adding EN signal on $memory\ram[29]$93 ($dff) from module register_file (D = \wd3, Q = \ram[29]).
Adding EN signal on $memory\ram[28]$91 ($dff) from module register_file (D = \wd3, Q = \ram[28]).
Adding EN signal on $memory\ram[27]$89 ($dff) from module register_file (D = \wd3, Q = \ram[27]).
Adding EN signal on $memory\ram[26]$87 ($dff) from module register_file (D = \wd3, Q = \ram[26]).
Adding EN signal on $memory\ram[25]$85 ($dff) from module register_file (D = \wd3, Q = \ram[25]).
Adding EN signal on $memory\ram[24]$83 ($dff) from module register_file (D = \wd3, Q = \ram[24]).
Adding EN signal on $memory\ram[23]$81 ($dff) from module register_file (D = \wd3, Q = \ram[23]).
Adding EN signal on $memory\ram[22]$79 ($dff) from module register_file (D = \wd3, Q = \ram[22]).
Adding EN signal on $memory\ram[21]$77 ($dff) from module register_file (D = \wd3, Q = \ram[21]).
Adding EN signal on $memory\ram[20]$75 ($dff) from module register_file (D = \wd3, Q = \ram[20]).
Adding EN signal on $memory\ram[1]$37 ($dff) from module register_file (D = \wd3, Q = \ram[1]).
Adding EN signal on $memory\ram[19]$73 ($dff) from module register_file (D = \wd3, Q = \ram[19]).
Adding EN signal on $memory\ram[18]$71 ($dff) from module register_file (D = \wd3, Q = \ram[18]).
Adding EN signal on $memory\ram[17]$69 ($dff) from module register_file (D = \wd3, Q = \ram[17]).
Adding EN signal on $memory\ram[16]$67 ($dff) from module register_file (D = \wd3, Q = \ram[16]).
Adding EN signal on $memory\ram[15]$65 ($dff) from module register_file (D = \wd3, Q = \ram[15]).
Adding EN signal on $memory\ram[14]$63 ($dff) from module register_file (D = \wd3, Q = \ram[14]).
Adding EN signal on $memory\ram[13]$61 ($dff) from module register_file (D = \wd3, Q = \ram[13]).
Adding EN signal on $memory\ram[12]$59 ($dff) from module register_file (D = \wd3, Q = \ram[12]).
Adding EN signal on $memory\ram[11]$57 ($dff) from module register_file (D = \wd3, Q = \ram[11]).
Adding EN signal on $memory\ram[10]$55 ($dff) from module register_file (D = \wd3, Q = \ram[10]).
Adding EN signal on $memory\ram[0]$35 ($dff) from module register_file (D = \wd3, Q = \ram[0]).

38.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 32 unused cells and 32 unused wires.
<suppressed ~33 debug messages>

38.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

38.18. Rerunning OPT passes. (Maybe there is more to do..)

38.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

38.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

38.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

38.22. Executing OPT_SHARE pass.

38.23. Executing OPT_DFF pass (perform DFF optimizations).

38.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

38.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

38.26. Finished OPT passes. (There is nothing left to do.)

39. Executing TECHMAP pass (map to technology primitives).

39.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

39.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
No more expansions possible.
<suppressed ~258 debug messages>

40. Executing OPT pass (performing simple optimizations).

40.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.
<suppressed ~64 debug messages>

40.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

40.3. Executing OPT_DFF pass (perform DFF optimizations).

40.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

40.5. Finished fast OPT passes.

41. Executing ABC pass (technology mapping using ABC).

41.1. Extracting gate netlist of module `\register_file' to `<abc-temp-dir>/input.blif'..
Extracted 2146 gates and 3187 wires to a netlist network with 1040 inputs and 96 outputs.

41.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

41.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:     1984
ABC RESULTS:               NOR cells:        2
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOT cells:        9
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              NAND cells:        2
ABC RESULTS:                OR cells:       48
ABC RESULTS:            ANDNOT cells:       99
ABC RESULTS:        internal signals:     2051
ABC RESULTS:           input signals:     1040
ABC RESULTS:          output signals:       96
Removing temp directory.

42. Executing OPT pass (performing simple optimizations).

42.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.
<suppressed ~960 debug messages>

42.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

42.3. Executing OPT_DFF pass (perform DFF optimizations).

42.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 6 unused cells and 1267 unused wires.
<suppressed ~7 debug messages>

42.5. Finished fast OPT passes.

43. Executing HIERARCHY pass (managing design hierarchy).

43.1. Analyzing design hierarchy..
Top module:  \register_file

43.2. Analyzing design hierarchy..
Top module:  \register_file
Removed 0 unused modules.

44. Printing statistics.

=== register_file ===

   Number of wires:               2119
   Number of wire bits:           3216
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3167
     $_ANDNOT_                      99
     $_AND_                          1
     $_DFFE_PP_                   1024
     $_MUX_                       1984
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                          48

45. Executing CHECK pass (checking for obvious problems).
Checking module register_file...
Found and reported 0 problems.

46. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/post_techmap.dot'.
Dumping module register_file to page 1.

47. Executing SHARE pass (SAT-based resource sharing).

48. Executing OPT pass (performing simple optimizations).

48.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

48.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

48.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \register_file..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

48.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \register_file.
Performed a total of 0 changes.

48.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\register_file'.
Removed a total of 0 cells.

48.6. Executing OPT_DFF pass (perform DFF optimizations).

48.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

48.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module register_file.

48.9. Finished OPT passes. (There is nothing left to do.)

49. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..

50. Printing statistics.

=== register_file ===

   Number of wires:               2119
   Number of wire bits:           3216
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3167
     $_ANDNOT_                      99
     $_AND_                          1
     $_DFFE_PP_                   1024
     $_MUX_                       1984
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                          48

mapping tbuf

51. Executing TECHMAP pass (map to technology primitives).

51.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

51.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

52. Executing SIMPLEMAP pass (map simple cells to gate primitives).

53. Executing TECHMAP pass (map to technology primitives).

53.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

53.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

54. Executing SIMPLEMAP pass (map simple cells to gate primitives).

55. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

55.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\register_file':
  mapped 1024 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

56. Printing statistics.

=== register_file ===

   Number of wires:               3143
   Number of wire bits:           4240
   Number of public wires:          40
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4191
     $_ANDNOT_                      99
     $_AND_                          1
     $_MUX_                       3008
     $_NAND_                         2
     $_NOR_                          2
     $_NOT_                          3
     $_ORNOT_                        4
     $_OR_                          48
     sky130_fd_sc_hd__dfxtp_2     1024

[INFO]: USING STRATEGY AREA 0

57. Executing ABC pass (technology mapping using ABC).

57.1. Extracting gate netlist of module `\register_file' to `/tmp/yosys-abc-vu6Zad/input.blif'..
Extracted 3167 gates and 4239 wires to a netlist network with 1072 inputs and 1088 outputs.

57.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-vu6Zad/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-vu6Zad/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-vu6Zad/input.blif 
ABC: + read_lib -w /openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.05 sec
ABC: Memory =    9.54 MB. Time =     0.05 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/register_file/runs/RUN_2025.06.04_17.28.17/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (1986.04 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   3945 ( 37.5 %)   Cap = 11.9 ff ( 12.9 %)   Area =    34967.29 ( 55.3 %)   Delay =  3425.99 ps  (  2.1 %)               
ABC: Path  0 --    1031 : 0    1 pi                      A =   0.00  Df =   8.2   -5.1 ps  S =  17.7 ps  Cin =  0.0 ff  Cout =   2.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    3000 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 398.8 -170.4 ps  S = 508.4 ps  Cin =  2.1 ff  Cout =  43.4 ff  Cmax = 130.0 ff  G = 1956  
ABC: Path  2 --    3006 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df = 888.3 -335.6 ps  S = 548.6 ps  Cin =  2.1 ff  Cout =  46.9 ff  Cmax = 130.0 ff  G = 2115  
ABC: Path  3 --    3024 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1408.5 -513.0 ps  S = 589.0 ps  Cin =  2.1 ff  Cout =  50.5 ff  Cmax = 130.0 ff  G = 2274  
ABC: Path  4 --    3025 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1959.6 -702.2 ps  S = 629.6 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  5 --    3026 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2349.7 -798.3 ps  S = 393.8 ps  Cin =  2.1 ff  Cout =  33.3 ff  Cmax = 130.0 ff  G = 1516  
ABC: Path  6 --    3029 : 3    4 sky130_fd_sc_hd__or3_2  A =   7.51  Df =2560.1 -477.8 ps  S =  90.8 ps  Cin =  1.5 ff  Cout =   6.6 ff  Cmax = 310.4 ff  G =  425  
ABC: Path  7 --    3104 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =2809.8 -535.7 ps  S = 285.2 ps  Cin =  2.1 ff  Cout =  23.7 ff  Cmax = 130.0 ff  G = 1089  
ABC: Path  8 --    3105 : 1   10 sky130_fd_sc_hd__buf_1  A =   3.75  Df =3106.4 -620.3 ps  S = 291.9 ps  Cin =  2.1 ff  Cout =  24.4 ff  Cmax = 130.0 ff  G = 1122  
ABC: Path  9 --    3106 : 4    1 sky130_fd_sc_hd__o31a_2 A =  10.01  Df =3426.0 -721.9 ps  S = 190.4 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 285.7 ff  G = 1425  
ABC: Start-point = pi1030 (\a2 [0]).  End-point = po33 (\rd2 [1]).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1072/ 1088  lat =    0  nd =  3945  edge =  10080  area =34961.25  delay = 9.00  lev = 9
ABC: + write_blif /tmp/yosys-abc-vu6Zad/output.blif 

57.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       58
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:      132
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:      106
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      283
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       85
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       48
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       84
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:       16
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       28
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1462
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1470
ABC RESULTS:        internal signals:     2079
ABC RESULTS:           input signals:     1072
ABC RESULTS:          output signals:     1088
Removing temp directory.

58. Executing SETUNDEF pass (replace undef values with defined constants).

59. Executing HILOMAP pass (mapping to constant drivers).

60. Executing SPLITNETS pass (splitting up multi-bit signals).

61. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \register_file..
Removed 0 unused cells and 4239 unused wires.
<suppressed ~1 debug messages>

62. Executing INSBUF pass (insert buffer cells for connected wires).

63. Executing CHECK pass (checking for obvious problems).
Checking module register_file...
Found and reported 0 problems.

64. Printing statistics.

=== register_file ===

   Number of wires:               4913
   Number of wire bits:           5018
   Number of public wires:        1032
   Number of public wire bits:    1137
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4969
     sky130_fd_sc_hd__a211o_2       10
     sky130_fd_sc_hd__a21o_2        58
     sky130_fd_sc_hd__a21oi_2        1
     sky130_fd_sc_hd__a22o_2        85
     sky130_fd_sc_hd__a22oi_2        1
     sky130_fd_sc_hd__a31o_2        23
     sky130_fd_sc_hd__a32o_2        24
     sky130_fd_sc_hd__and2_2         5
     sky130_fd_sc_hd__and2b_2        2
     sky130_fd_sc_hd__and3_2         9
     sky130_fd_sc_hd__and3b_2        4
     sky130_fd_sc_hd__buf_1       1470
     sky130_fd_sc_hd__dfxtp_2     1024
     sky130_fd_sc_hd__inv_2          8
     sky130_fd_sc_hd__mux2_2      1462
     sky130_fd_sc_hd__mux4_2       283
     sky130_fd_sc_hd__nand2_2       16
     sky130_fd_sc_hd__nand3_2        1
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        28
     sky130_fd_sc_hd__nor2b_2        1
     sky130_fd_sc_hd__o2111a_2       3
     sky130_fd_sc_hd__o211a_2      106
     sky130_fd_sc_hd__o21a_2        48
     sky130_fd_sc_hd__o21ai_2        2
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o221a_2       19
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2       132
     sky130_fd_sc_hd__o311a_2        2
     sky130_fd_sc_hd__o31a_2        35
     sky130_fd_sc_hd__or2_2         84
     sky130_fd_sc_hd__or2b_2         2
     sky130_fd_sc_hd__or3_2          7
     sky130_fd_sc_hd__or3b_2        10

   Chip area for module '\register_file': 56748.176000

65. Executing Verilog backend.
Dumping module `\register_file'.

66. Executing JSON backend.

End of script. Logfile hash: 46584e6f35, CPU: user 0.64s system 0.02s, MEM: 44.06 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 86% 2x abc (3 sec), 2% 18x opt_expr (0 sec), ...
