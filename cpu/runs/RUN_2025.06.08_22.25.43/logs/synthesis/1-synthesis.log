
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Liberty frontend: /root/.volare/sky130A/libs.ref/sky130_fd_sc_hd/lib/sky130_fd_sc_hd__tt_025C_1v80.lib
Imported 428 cell types from liberty file.

2. Executing Verilog-2005 frontend: /openlane/designs/cpu/src/seven_segment_display.v
Parsing SystemVerilog input from `/openlane/designs/cpu/src/seven_segment_display.v' to AST representation.
Storing AST representation for module `$abstract\seven_segment_display'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /openlane/designs/cpu/src/program_counter.v
Parsing SystemVerilog input from `/openlane/designs/cpu/src/program_counter.v' to AST representation.
Storing AST representation for module `$abstract\program_counter'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /openlane/designs/cpu/src/instruction_decoder.v
Parsing SystemVerilog input from `/openlane/designs/cpu/src/instruction_decoder.v' to AST representation.
Storing AST representation for module `$abstract\instruction_decoder'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /openlane/designs/cpu/src/register_file.v
Parsing SystemVerilog input from `/openlane/designs/cpu/src/register_file.v' to AST representation.
Storing AST representation for module `$abstract\register_file'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: /openlane/designs/cpu/src/cpu.v
Parsing SystemVerilog input from `/openlane/designs/cpu/src/cpu.v' to AST representation.
Storing AST representation for module `$abstract\cpu'.
Successfully finished Verilog frontend.

7. Executing HIERARCHY pass (managing design hierarchy).

8. Executing AST frontend in derive mode using pre-parsed AST for module `\cpu'.
Generating RTLIL representation for module `\cpu'.

8.1. Analyzing design hierarchy..
Top module:  \cpu

8.2. Executing AST frontend in derive mode using pre-parsed AST for module `\seven_segment_display'.
Generating RTLIL representation for module `\seven_segment_display'.

8.3. Executing AST frontend in derive mode using pre-parsed AST for module `\instruction_decoder'.
Generating RTLIL representation for module `\instruction_decoder'.

8.4. Executing AST frontend in derive mode using pre-parsed AST for module `\program_counter'.
Generating RTLIL representation for module `\program_counter'.

8.5. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \seven_segment_display
Used module:     \instruction_decoder
Used module:     \program_counter

8.6. Executing AST frontend in derive mode using pre-parsed AST for module `\register_file'.
Generating RTLIL representation for module `\register_file'.

8.7. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \seven_segment_display
Used module:     \instruction_decoder
Used module:         \register_file
Used module:     \program_counter

8.8. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \seven_segment_display
Used module:     \instruction_decoder
Used module:         \register_file
Used module:     \program_counter
Removing unused module `$abstract\cpu'.
Removing unused module `$abstract\register_file'.
Removing unused module `$abstract\instruction_decoder'.
Removing unused module `$abstract\program_counter'.
Removing unused module `$abstract\seven_segment_display'.
Removed 5 unused modules.

9. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/hierarchy.dot'.
Dumping module cpu to page 1.
Renaming module cpu to cpu.

10. Executing TRIBUF pass.

11. Executing HIERARCHY pass (managing design hierarchy).

11.1. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \seven_segment_display
Used module:     \instruction_decoder
Used module:         \register_file
Used module:     \program_counter

11.2. Analyzing design hierarchy..
Top module:  \cpu
Used module:     \seven_segment_display
Used module:     \instruction_decoder
Used module:         \register_file
Used module:     \program_counter
Removed 0 unused modules.

12. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

13. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/cpu/src/program_counter.v:11$84 in module program_counter.
Removed 1 dead cases from process $proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70 in module instruction_decoder.
Marked 3 switch rules as full_case in process $proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70 in module instruction_decoder.
Removed 1 dead cases from process $proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69 in module seven_segment_display.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69 in module seven_segment_display.
Marked 1 switch rules as full_case in process $proc$/openlane/designs/cpu/src/register_file.v:14$87 in module register_file.
Removed a total of 2 dead cases.

14. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 28 assignments to connections.

15. Executing PROC_INIT pass (extract init attributes).

16. Executing PROC_ARST pass (detect async resets in processes).

17. Executing PROC_ROM pass (convert switches to ROMs).
Converted 1 switch.
<suppressed ~8 debug messages>

18. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
Creating decoders for process `\program_counter.$proc$/openlane/designs/cpu/src/program_counter.v:11$84'.
     1/1: $0\pc[4:0]
Creating decoders for process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
     1/10: $0\state[0:0]
     2/10: $0\c[18:0]
     3/10: $0\we3[0:0]
     4/10: $0\a3[4:0]
     5/10: $0\a2[4:0]
     6/10: $0\a1[4:0]
     7/10: $0\wd3[31:0]
     8/10: $0\adress[4:0]
     9/10: $0\jmp[0:0]
    10/10: $0\result[31:0]
Creating decoders for process `\seven_segment_display.$proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69'.
     1/1: $1\segments[6:0]
Creating decoders for process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:20$96'.
Creating decoders for process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
     1/3: $1$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$95
     2/3: $1$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_DATA[31:0]$94
     3/3: $1$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_ADDR[4:0]$93

19. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:42$1_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:43$2_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:44$3_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:45$4_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:46$5_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:47$6_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:48$7_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:49$8_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:50$9_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:51$10_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:52$11_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:53$12_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:54$13_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:55$14_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:56$15_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:57$16_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:58$17_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:59$18_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:60$19_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:61$20_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:62$21_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\cpu.$memwr$\memory$/openlane/designs/cpu/src/cpu.v:63$22_EN' from process `\cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
No latch inferred for signal `\seven_segment_display.\segments' from process `\seven_segment_display.$proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69'.
No latch inferred for signal `\register_file.\rd1' from process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:20$96'.
No latch inferred for signal `\register_file.\rd2' from process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:20$96'.

20. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\program_counter.\pc' using process `\program_counter.$proc$/openlane/designs/cpu/src/program_counter.v:11$84'.
  created $dff cell `$procdff$223' with positive edge clock.
Creating register for signal `\instruction_decoder.\result' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$224' with positive edge clock.
Creating register for signal `\instruction_decoder.\jmp' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$225' with positive edge clock.
Creating register for signal `\instruction_decoder.\adress' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$226' with positive edge clock.
Creating register for signal `\instruction_decoder.\wd3' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$227' with positive edge clock.
Creating register for signal `\instruction_decoder.\a1' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$228' with positive edge clock.
Creating register for signal `\instruction_decoder.\a2' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$229' with positive edge clock.
Creating register for signal `\instruction_decoder.\a3' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$230' with positive edge clock.
Creating register for signal `\instruction_decoder.\we3' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$231' with positive edge clock.
Creating register for signal `\instruction_decoder.\state' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$232' with positive edge clock.
Creating register for signal `\instruction_decoder.\c' using process `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
  created $dff cell `$procdff$233' with positive edge clock.
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_ADDR' using process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
  created $dff cell `$procdff$234' with positive edge clock.
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_DATA' using process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
  created $dff cell `$procdff$235' with positive edge clock.
Creating register for signal `\register_file.$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN' using process `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
  created $dff cell `$procdff$236' with positive edge clock.

21. Executing PROC_MEMWR pass (convert process memory writes to cells).

22. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `cpu.$proc$/openlane/designs/cpu/src/cpu.v:0$46'.
Found and cleaned up 3 empty switches in `\program_counter.$proc$/openlane/designs/cpu/src/program_counter.v:11$84'.
Removing empty process `program_counter.$proc$/openlane/designs/cpu/src/program_counter.v:11$84'.
Found and cleaned up 4 empty switches in `\instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
Removing empty process `instruction_decoder.$proc$/openlane/designs/cpu/src/instruction_decoder.v:34$70'.
Found and cleaned up 1 empty switch in `\seven_segment_display.$proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69'.
Removing empty process `seven_segment_display.$proc$/openlane/designs/cpu/src/seven_segment_display.v:6$69'.
Removing empty process `register_file.$proc$/openlane/designs/cpu/src/register_file.v:20$96'.
Found and cleaned up 1 empty switch in `\register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
Removing empty process `register_file.$proc$/openlane/designs/cpu/src/register_file.v:14$87'.
Cleaned up 9 empty switches.

23. Executing CHECK pass (checking for obvious problems).
Checking module cpu...
Checking module program_counter...
Checking module instruction_decoder...
Checking module seven_segment_display...
Checking module register_file...
Found and reported 0 problems.

24. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
Optimizing module program_counter.
Optimizing module instruction_decoder.
<suppressed ~11 debug messages>
Optimizing module seven_segment_display.
Optimizing module register_file.
<suppressed ~3 debug messages>

25. Executing FLATTEN pass (flatten design).
Deleting now unused module program_counter.
Deleting now unused module instruction_decoder.
Deleting now unused module seven_segment_display.
Deleting now unused module register_file.
<suppressed ~4 debug messages>

26. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 7 unused cells and 100 unused wires.
<suppressed ~8 debug messages>

28. Executing OPT pass (performing simple optimizations).

28.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

28.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~60 debug messages>
Removed a total of 20 cells.

28.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

28.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
    New ctrl vector for $pmux cell $flatten\decoder.$procmux$127: $auto$opt_reduce.cc:134:opt_pmux$239
    Consolidated identical input bits for $mux cell $flatten\decoder.\rf.$procmux$215:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90
      New ports: A=1'0, B=1'1, Y=$flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0]
      New connections: $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [31:1] = { $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] $flatten\decoder.\rf.$0$memwr$\ram$/openlane/designs/cpu/src/register_file.v:16$86_EN[31:0]$90 [0] }
  Optimizing cells in module \cpu.
Performed a total of 2 changes.

28.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

28.6. Executing OPT_DFF pass (perform DFF optimizations).

28.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 20 unused wires.
<suppressed ~1 debug messages>

28.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

28.9. Rerunning OPT passes. (Maybe there is more to do..)

28.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

28.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

28.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

28.13. Executing OPT_DFF pass (perform DFF optimizations).

28.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

28.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

28.16. Finished OPT passes. (There is nothing left to do.)

29. Executing FSM pass (extract and optimize FSM).

29.1. Executing FSM_DETECT pass (finding FSMs in design).

29.2. Executing FSM_EXTRACT pass (extracting FSM from design).

29.3. Executing FSM_OPT pass (simple optimizations of FSMs).

29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

29.5. Executing FSM_OPT pass (simple optimizations of FSMs).

29.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

29.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

29.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~16 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $flatten\decoder.$procdff$233 ($dff) from module cpu (D = \decoder.inst [18:0], Q = \decoder.c).
Adding SRST signal on $flatten\decoder.$procdff$232 ($dff) from module cpu (D = $flatten\decoder.$procmux$115_Y, Q = \decoder.state, rval = 1'0).
Adding SRST signal on $flatten\decoder.$procdff$231 ($dff) from module cpu (D = $flatten\decoder.$procmux$134_Y, Q = \decoder.we3, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$248 ($sdff) from module cpu (D = $flatten\decoder.$procmux$127_Y, Q = \decoder.we3).
Adding EN signal on $flatten\decoder.$procdff$230 ($dff) from module cpu (D = \decoder.inst [28:24], Q = \decoder.a3).
Adding EN signal on $flatten\decoder.$procdff$229 ($dff) from module cpu (D = \decoder.inst [23:19], Q = \decoder.a2).
Adding EN signal on $flatten\decoder.$procdff$228 ($dff) from module cpu (D = \decoder.inst [18:14], Q = \decoder.a1).
Adding EN signal on $flatten\decoder.$procdff$227 ($dff) from module cpu (D = $flatten\decoder.$procmux$157_Y, Q = \decoder.wd3).
Adding EN signal on $flatten\decoder.$procdff$226 ($dff) from module cpu (D = $flatten\decoder.$procmux$175_Y, Q = \decoder.adress).
Adding SRST signal on $flatten\decoder.$procdff$225 ($dff) from module cpu (D = $flatten\decoder.$procmux$196_Y, Q = \decoder.jmp, rval = 1'0).
Adding EN signal on $auto$ff.cc:266:slice$287 ($sdff) from module cpu (D = $flatten\decoder.$procmux$191_Y, Q = \decoder.jmp).
Adding EN signal on $flatten\decoder.$procdff$224 ($dff) from module cpu (D = $flatten\decoder.$procmux$201_Y, Q = \decoder.result).
Adding SRST signal on $flatten\counter.$procdff$223 ($dff) from module cpu (D = $flatten\counter.$procmux$110_Y, Q = \counter.pc, rval = 5'00000).
Adding EN signal on $auto$ff.cc:266:slice$296 ($sdff) from module cpu (D = $flatten\counter.$procmux$110_Y, Q = \counter.pc).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 20 unused cells and 20 unused wires.
<suppressed ~21 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~4 debug messages>

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~51 debug messages>
Removed a total of 17 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

30.16. Rerunning OPT passes. (Maybe there is more to do..)

30.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

30.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

30.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

30.20. Executing OPT_DFF pass (perform DFF optimizations).

30.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

30.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

30.23. Finished OPT passes. (There is nothing left to do.)

31. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 address bits (of 32) from memory init port cpu.$flatten\ssd.$auto$mem.cc:328:emit$106 ($flatten\ssd.$auto$proc_rom.cc:150:do_switch$104).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:42$24 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:43$25 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:44$26 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:45$27 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:46$28 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:47$29 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:48$30 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:49$31 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:50$32 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:51$33 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:52$34 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:53$35 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:54$36 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:55$37 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:56$38 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:57$39 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:58$40 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:59$41 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:60$42 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:61$43 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:62$44 (memory).
Removed top 27 address bits (of 32) from memory init port cpu.$meminit$\memory$/openlane/designs/cpu/src/cpu.v:63$45 (memory).
Removed top 31 bits (of 32) from port B of cell cpu.$flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85 ($add).
Removed top 27 bits (of 32) from port Y of cell cpu.$flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85 ($add).
Removed top 2 bits (of 3) from port B of cell cpu.$flatten\decoder.$procmux$176_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell cpu.$auto$opt_dff.cc:195:make_patterns_logic$282 ($ne).
Removed top 1 bits (of 3) from port B of cell cpu.$flatten\decoder.$procmux$133_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell cpu.$flatten\decoder.$procmux$132_CMP0 ($eq).
Removed top 27 bits (of 32) from wire cpu.$flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85_Y.

32. Executing PEEPOPT pass (run peephole optimizers).

33. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

34. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module cpu:
  creating $macc model for $flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85 ($add).
  creating $macc model for $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:66$72 ($add).
  creating $macc model for $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:86$80 ($add).
  creating $macc model for $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:71$74 ($sub).
  creating $macc model for $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:91$82 ($sub).
  creating $alu model for $macc $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:91$82.
  creating $alu model for $macc $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:71$74.
  creating $alu model for $macc $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:86$80.
  creating $alu model for $macc $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:66$72.
  creating $alu model for $macc $flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85.
  creating $alu model for $flatten\decoder.$eq$/openlane/designs/cpu/src/instruction_decoder.v:56$71 ($eq): merged with $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:71$74.
  creating $alu cell for $flatten\counter.$add$/openlane/designs/cpu/src/program_counter.v:14$85: $auto$alumacc.cc:485:replace_alu$301
  creating $alu cell for $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:86$80: $auto$alumacc.cc:485:replace_alu$304
  creating $alu cell for $flatten\decoder.$add$/openlane/designs/cpu/src/instruction_decoder.v:66$72: $auto$alumacc.cc:485:replace_alu$307
  creating $alu cell for $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:71$74, $flatten\decoder.$eq$/openlane/designs/cpu/src/instruction_decoder.v:56$71: $auto$alumacc.cc:485:replace_alu$310
  creating $alu cell for $flatten\decoder.$sub$/openlane/designs/cpu/src/instruction_decoder.v:91$82: $auto$alumacc.cc:485:replace_alu$315
  created 5 $alu and 0 $macc cells.

35. Executing SHARE pass (SAT-based resource sharing).
Found 4 cells in module cpu that may be considered for resource sharing.
  Analyzing resource sharing options for $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:22$101 ($memrd):
    Found 1 activation_patterns using ctrl signal $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:22$100_Y.
    Found 1 candidates: $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:21$98
    Analyzing resource sharing with $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:21$98 ($memrd):
      Found 1 activation_patterns using ctrl signal $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:21$97_Y.
      Forbidden control signals for this pair of cells: $flatten\decoder.$eq$/openlane/designs/cpu/src/instruction_decoder.v:56$71_Y
      Activation pattern for cell $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:22$101: $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:22$100_Y = 1'0
      Activation pattern for cell $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:21$98: $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:21$97_Y = 1'0
      Size of SAT problem: 0 cells, 27 variables, 51 clauses
      According to the SAT solver this pair of cells can not be shared.
      Model from SAT solver: { $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:22$100_Y $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:21$97_Y } = 2'00
  Analyzing resource sharing options for $flatten\decoder.\rf.$memrd$\ram$/openlane/designs/cpu/src/register_file.v:21$98 ($memrd):
    Found 1 activation_patterns using ctrl signal $flatten\decoder.\rf.$eq$/openlane/designs/cpu/src/register_file.v:21$97_Y.
    No candidates found.
  Analyzing resource sharing options for $flatten\decoder.$shr$/openlane/designs/cpu/src/instruction_decoder.v:81$78 ($shr):
    Found 1 activation_patterns using ctrl signal $flatten\decoder.$procmux$130_CMP.
    No candidates found.
  Analyzing resource sharing options for $flatten\decoder.$shl$/openlane/designs/cpu/src/instruction_decoder.v:76$76 ($shl):
    Found 1 activation_patterns using ctrl signal $flatten\decoder.$procmux$131_CMP.
    No candidates found.

36. Executing OPT pass (performing simple optimizations).

36.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

36.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

36.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

36.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

36.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

36.6. Executing OPT_DFF pass (perform DFF optimizations).

36.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

36.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

36.9. Rerunning OPT passes. (Maybe there is more to do..)

36.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~11 debug messages>

36.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

36.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

36.13. Executing OPT_DFF pass (perform DFF optimizations).

36.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

36.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

36.16. Finished OPT passes. (There is nothing left to do.)

37. Executing MEMORY pass.

37.1. Executing OPT_MEM pass (optimize memories).
cpu.memory: removing const-0 lane 4
cpu.memory: removing const-0 lane 5
cpu.memory: removing const-0 lane 6
cpu.memory: removing const-0 lane 7
cpu.memory: removing const-0 lane 8
cpu.memory: removing const-0 lane 9
cpu.memory: removing const-0 lane 10
cpu.memory: removing const-0 lane 11
cpu.memory: removing const-0 lane 12
cpu.memory: removing const-0 lane 13
cpu.memory: removing const-0 lane 14
Performed a total of 1 transformations.

37.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

37.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing cpu.decoder.rf.ram write port 0.

37.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

37.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104'[0] in module `\cpu': no output FF found.
Checking read port `\decoder.rf.ram'[0] in module `\cpu': no output FF found.
Checking read port `\decoder.rf.ram'[1] in module `\cpu': no output FF found.
Checking read port `\memory'[0] in module `\cpu': no output FF found.
Checking read port address `$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104'[0] in module `\cpu': merged address FF to cell.
Checking read port address `\decoder.rf.ram'[0] in module `\cpu': merged address FF to cell.
Checking read port address `\decoder.rf.ram'[1] in module `\cpu': merged address FF to cell.
Checking read port address `\memory'[0] in module `\cpu': merged address FF to cell.

37.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

37.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).
Consolidating read ports of memory cpu.decoder.rf.ram by address:

37.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

37.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

37.10. Executing MEMORY_COLLECT pass (generating $mem cells).

38. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~12 debug messages>

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:266:slice$264 ($dffe) from module cpu.
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$240 ($dffe) from module cpu.

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

39.5. Rerunning OPT passes. (Removed registers in this run.)

39.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~1 debug messages>

39.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

39.8. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 4 on $auto$ff.cc:266:slice$278 ($dffe) from module cpu.

39.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

39.10. Rerunning OPT passes. (Removed registers in this run.)

39.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

39.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

39.13. Executing OPT_DFF pass (perform DFF optimizations).

39.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

39.15. Finished fast OPT passes.

40. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory $flatten\ssd.$auto$proc_rom.cc:150:do_switch$104 in module \cpu:
  created 16 $dff cells and 0 static cells of width 7.
Extracted data FF from read port 0 of cpu.$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104: $$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdreg[0]
  read interface: 1 $dff and 15 $mux cells.
  write interface: 0 write mux blocks.
Mapping memory \decoder.rf.ram in module \cpu:
  created 32 $dff cells and 0 static cells of width 32.
Extracted addr FF from read port 0 of cpu.decoder.rf.ram: $\decoder.rf.ram$rdreg[0]
Extracted addr FF from read port 1 of cpu.decoder.rf.ram: $\decoder.rf.ram$rdreg[1]
  read interface: 2 $dff and 62 $mux cells.
  write interface: 32 write mux blocks.
Mapping memory \memory in module \cpu:
  created 32 $dff cells and 0 static cells of width 21.
Extracted data FF from read port 0 of cpu.memory: $\memory$rdreg[0]
  read interface: 1 $dff and 31 $mux cells.
  write interface: 0 write mux blocks.

41. Executing OPT pass (performing simple optimizations).

41.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~21 debug messages>

41.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

41.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~43 debug messages>

41.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][3]$932:
      Old ports: A=21'100111100001010100000, B=21'000000000000000000000, Y=$memory\memory$rdmux[0][3][1]$b$904
      New ports: A=1'1, B=1'0, Y=$memory\memory$rdmux[0][3][1]$b$904 [5]
      New connections: { $memory\memory$rdmux[0][3][1]$b$904 [20:6] $memory\memory$rdmux[0][3][1]$b$904 [4:0] } = { $memory\memory$rdmux[0][3][1]$b$904 [5] 2'00 $memory\memory$rdmux[0][3][1]$b$904 [5] $memory\memory$rdmux[0][3][1]$b$904 [5] $memory\memory$rdmux[0][3][1]$b$904 [5] $memory\memory$rdmux[0][3][1]$b$904 [5] 4'0000 $memory\memory$rdmux[0][3][1]$b$904 [5] 1'0 $memory\memory$rdmux[0][3][1]$b$904 [5] 6'000000 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][7]$944:
      Old ports: A=21'000001001010010100111, B=21'110001100000000000001, Y=$memory\memory$rdmux[0][3][3]$b$910
      New ports: A=2'01, B=2'10, Y={ $memory\memory$rdmux[0][3][3]$b$910 [14] $memory\memory$rdmux[0][3][3]$b$910 [1] }
      New connections: { $memory\memory$rdmux[0][3][3]$b$910 [20:15] $memory\memory$rdmux[0][3][3]$b$910 [13:2] $memory\memory$rdmux[0][3][3]$b$910 [0] } = { $memory\memory$rdmux[0][3][3]$b$910 [14] $memory\memory$rdmux[0][3][3]$b$910 [14] 5'00010 $memory\memory$rdmux[0][3][3]$b$910 [1] 1'0 $memory\memory$rdmux[0][3][3]$b$910 [1] 2'00 $memory\memory$rdmux[0][3][3]$b$910 [1] 1'0 $memory\memory$rdmux[0][3][3]$b$910 [1] 2'00 $memory\memory$rdmux[0][3][3]$b$910 [1] 1'1 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][0]$923:
      Old ports: A=21'110010100000000001010, B=21'110011110000000001111, Y=$memory\memory$rdmux[0][3][0]$a$900
      New ports: A=1'0, B=1'1, Y=$memory\memory$rdmux[0][3][0]$a$900 [0]
      New connections: $memory\memory$rdmux[0][3][0]$a$900 [20:1] = { 5'11001 $memory\memory$rdmux[0][3][0]$a$900 [0] 1'1 $memory\memory$rdmux[0][3][0]$a$900 [0] 10'0000000001 $memory\memory$rdmux[0][3][0]$a$900 [0] 1'1 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][8]$947:
      Old ports: A=21'110001110000000000001, B=21'010010000110011100000, Y=$memory\memory$rdmux[0][3][4]$a$912
      New ports: A=2'01, B=2'10, Y={ $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [0] }
      New connections: { $memory\memory$rdmux[0][3][4]$a$912 [20:6] $memory\memory$rdmux[0][3][4]$a$912 [4:1] } = { $memory\memory$rdmux[0][3][4]$a$912 [0] 3'100 $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [0] $memory\memory$rdmux[0][3][4]$a$912 [0] $memory\memory$rdmux[0][3][4]$a$912 [0] 1'0 $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [5] 2'00 $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][10]$953:
      Old ports: A=21'110001010010101000001, B=21'001000000000000001110, Y=$memory\memory$rdmux[0][3][5]$a$915
      New ports: A=2'01, B=2'10, Y=$memory\memory$rdmux[0][3][5]$a$915 [1:0]
      New connections: $memory\memory$rdmux[0][3][5]$a$915 [20:2] = { $memory\memory$rdmux[0][3][5]$a$915 [0] $memory\memory$rdmux[0][3][5]$a$915 [0] $memory\memory$rdmux[0][3][5]$a$915 [1] 2'00 $memory\memory$rdmux[0][3][5]$a$915 [0] 1'0 $memory\memory$rdmux[0][3][5]$a$915 [0] 2'00 $memory\memory$rdmux[0][3][5]$a$915 [0] 1'0 $memory\memory$rdmux[0][3][5]$a$915 [0] 1'0 $memory\memory$rdmux[0][3][5]$a$915 [0] 2'00 $memory\memory$rdmux[0][3][5]$a$915 [1] $memory\memory$rdmux[0][3][5]$a$915 [1] }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][6]$941:
      Old ports: A=21'110001000000000000100, B=21'010001010000000000000, Y=$memory\memory$rdmux[0][3][3]$a$909
      New ports: A=2'01, B=2'10, Y={ $memory\memory$rdmux[0][3][3]$a$909 [13] $memory\memory$rdmux[0][3][3]$a$909 [2] }
      New connections: { $memory\memory$rdmux[0][3][3]$a$909 [20:14] $memory\memory$rdmux[0][3][3]$a$909 [12:3] $memory\memory$rdmux[0][3][3]$a$909 [1:0] } = { $memory\memory$rdmux[0][3][3]$a$909 [2] 18'100010000000000000 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][2]$929:
      Old ports: A=21'110101010000000000010, B=21'001000000000000001100, Y=$memory\memory$rdmux[0][3][1]$a$903
      New ports: A=2'01, B=2'10, Y=$memory\memory$rdmux[0][3][1]$a$903 [2:1]
      New connections: { $memory\memory$rdmux[0][3][1]$a$903 [20:3] $memory\memory$rdmux[0][3][1]$a$903 [0] } = { $memory\memory$rdmux[0][3][1]$a$903 [1] $memory\memory$rdmux[0][3][1]$a$903 [1] $memory\memory$rdmux[0][3][1]$a$903 [2:1] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [1] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [1] 9'000000000 $memory\memory$rdmux[0][3][1]$a$903 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][9]$950:
      Old ports: A=21'010001100111000000000, B=21'010001110100000000000, Y=$memory\memory$rdmux[0][3][4]$b$913
      New ports: A=2'01, B=2'10, Y={ $memory\memory$rdmux[0][3][4]$b$913 [13] $memory\memory$rdmux[0][3][4]$b$913 [9] }
      New connections: { $memory\memory$rdmux[0][3][4]$b$913 [20:14] $memory\memory$rdmux[0][3][4]$b$913 [12:10] $memory\memory$rdmux[0][3][4]$b$913 [8:0] } = { 9'010001101 $memory\memory$rdmux[0][3][4]$b$913 [9] 9'000000000 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][6]$378:
      Old ports: A=7'0110001, B=7'1000010, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358
      New ports: A=2'01, B=2'10, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [1:0]
      New connections: $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [6:2] = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [1:0] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [0] 2'00 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][5]$375:
      Old ports: A=7'0001000, B=7'1100000, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [3] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [6] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [2:0] } = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][4]$372:
      Old ports: A=7'0000000, B=7'0000100, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355 [2]
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355 [6:3] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355 [1:0] } = 6'000000
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][3]$369:
      Old ports: A=7'0100000, B=7'0001111, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [6] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [4:1] } = { 2'00 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][2]$366:
      Old ports: A=7'1001100, B=7'0100100, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352
      New ports: A=2'01, B=2'10, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [3] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [6] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [2:0] } = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [3] 4'0100 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][1]$363:
      Old ports: A=7'0010010, B=7'0000110, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350
      New ports: A=2'10, B=2'01, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [2] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [6:5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [3] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [1:0] } = 5'00010
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][0]$360:
      Old ports: A=7'0000001, B=7'1001111, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1]
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [6:2] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [0] } = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] 2'00 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] 1'1 }
    Consolidated identical input bits for $mux cell $auto$ff.cc:504:unmap_ce$329:
      Old ports: A={ \decoder.a1 [4:1] 1'0 }, B={ \decoder.inst [18:15] 1'0 }, Y=$auto$rtlil.cc:2573:Mux$330
      New ports: A=\decoder.a1 [4:1], B=\decoder.inst [18:15], Y=$auto$rtlil.cc:2573:Mux$330 [4:1]
      New connections: $auto$rtlil.cc:2573:Mux$330 [0] = 1'0
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][3][7]$381:
      Old ports: A=7'0110000, B=7'0111000, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359
      New ports: A=1'0, B=1'1, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359 [3]
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359 [6:4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359 [2:0] } = 6'011000
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][4][1]$926:
      Old ports: A=21'010110010111101010000, B=21'111101001100100000101, Y=$memory\memory$rdmux[0][3][0]$b$901
      New ports: A=2'10, B=2'01, Y={ $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [0] }
      New connections: { $memory\memory$rdmux[0][3][0]$b$901 [20:5] $memory\memory$rdmux[0][3][0]$b$901 [3:1] } = { $memory\memory$rdmux[0][3][0]$b$901 [0] 1'1 $memory\memory$rdmux[0][3][0]$b$901 [0] 1'1 $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [0] 1'0 $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [0] 1'1 $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [4] 2'10 $memory\memory$rdmux[0][3][0]$b$901 [4] 2'00 $memory\memory$rdmux[0][3][0]$b$901 [0] 1'0 }
  Optimizing cells in module \cpu.
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][5]$914:
      Old ports: A=$memory\memory$rdmux[0][3][5]$a$915, B=21'x, Y=$memory\memory$rdmux[0][2][2]$b$895
      New ports: A={ 1'0 $memory\memory$rdmux[0][3][5]$a$915 [1:0] }, B=3'x, Y={ $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [1:0] }
      New connections: { $memory\memory$rdmux[0][2][2]$b$895 [20:5] $memory\memory$rdmux[0][2][2]$b$895 [3:2] } = { $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [1] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [1] $memory\memory$rdmux[0][2][2]$b$895 [1] }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][4]$911:
      Old ports: A=$memory\memory$rdmux[0][3][4]$a$912, B=$memory\memory$rdmux[0][3][4]$b$913, Y=$memory\memory$rdmux[0][2][2]$a$894
      New ports: A={ $memory\memory$rdmux[0][3][4]$a$912 [0] $memory\memory$rdmux[0][3][4]$a$912 [0] $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [5] 1'0 $memory\memory$rdmux[0][3][4]$a$912 [5] $memory\memory$rdmux[0][3][4]$a$912 [0] }, B={ 1'1 $memory\memory$rdmux[0][3][4]$b$913 [13] 1'1 $memory\memory$rdmux[0][3][4]$b$913 [9] $memory\memory$rdmux[0][3][4]$b$913 [9] 2'00 }, Y={ $memory\memory$rdmux[0][2][2]$a$894 [14:13] $memory\memory$rdmux[0][2][2]$a$894 [11:9] $memory\memory$rdmux[0][2][2]$a$894 [5] $memory\memory$rdmux[0][2][2]$a$894 [0] }
      New connections: { $memory\memory$rdmux[0][2][2]$a$894 [20:15] $memory\memory$rdmux[0][2][2]$a$894 [12] $memory\memory$rdmux[0][2][2]$a$894 [8:6] $memory\memory$rdmux[0][2][2]$a$894 [4:1] } = { $memory\memory$rdmux[0][2][2]$a$894 [0] 3'100 $memory\memory$rdmux[0][2][2]$a$894 [5] $memory\memory$rdmux[0][2][2]$a$894 [14] 2'00 $memory\memory$rdmux[0][2][2]$a$894 [5] $memory\memory$rdmux[0][2][2]$a$894 [5] 4'0000 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][3]$908:
      Old ports: A=$memory\memory$rdmux[0][3][3]$a$909, B=$memory\memory$rdmux[0][3][3]$b$910, Y=$memory\memory$rdmux[0][2][1]$b$892
      New ports: A={ $memory\memory$rdmux[0][3][3]$a$909 [2] 2'10 $memory\memory$rdmux[0][3][3]$a$909 [13] $memory\memory$rdmux[0][3][3]$a$909 [2] 2'00 }, B={ $memory\memory$rdmux[0][3][3]$b$910 [14] $memory\memory$rdmux[0][3][3]$b$910 [14] $memory\memory$rdmux[0][3][3]$b$910 [14] 1'0 $memory\memory$rdmux[0][3][3]$b$910 [1] $memory\memory$rdmux[0][3][3]$b$910 [1] 1'1 }, Y={ $memory\memory$rdmux[0][2][1]$b$892 [20:19] $memory\memory$rdmux[0][2][1]$b$892 [14:13] $memory\memory$rdmux[0][2][1]$b$892 [2:0] }
      New connections: { $memory\memory$rdmux[0][2][1]$b$892 [18:15] $memory\memory$rdmux[0][2][1]$b$892 [12:3] } = { 4'0001 $memory\memory$rdmux[0][2][1]$b$892 [1] 1'0 $memory\memory$rdmux[0][2][1]$b$892 [1] 2'00 $memory\memory$rdmux[0][2][1]$b$892 [1] 1'0 $memory\memory$rdmux[0][2][1]$b$892 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][1]$902:
      Old ports: A=$memory\memory$rdmux[0][3][1]$a$903, B=$memory\memory$rdmux[0][3][1]$b$904, Y=$memory\memory$rdmux[0][2][0]$b$889
      New ports: A={ $memory\memory$rdmux[0][3][1]$a$903 [1] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [2:1] }, B={ $memory\memory$rdmux[0][3][1]$b$904 [5] $memory\memory$rdmux[0][3][1]$b$904 [5] 2'00 }, Y={ $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [5] $memory\memory$rdmux[0][2][0]$b$889 [2:1] }
      New connections: { $memory\memory$rdmux[0][2][0]$b$889 [20:16] $memory\memory$rdmux[0][2][0]$b$889 [14:6] $memory\memory$rdmux[0][2][0]$b$889 [4:3] $memory\memory$rdmux[0][2][0]$b$889 [0] } = { $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [1] $memory\memory$rdmux[0][2][0]$b$889 [2] $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [5] $memory\memory$rdmux[0][2][0]$b$889 [5] $memory\memory$rdmux[0][2][0]$b$889 [1] 3'000 $memory\memory$rdmux[0][2][0]$b$889 [5] 1'0 $memory\memory$rdmux[0][2][0]$b$889 [5] 2'00 $memory\memory$rdmux[0][2][0]$b$889 [2] 1'0 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][0]$899:
      Old ports: A=$memory\memory$rdmux[0][3][0]$a$900, B=$memory\memory$rdmux[0][3][0]$b$901, Y=$memory\memory$rdmux[0][2][0]$a$888
      New ports: A={ 2'11 $memory\memory$rdmux[0][3][0]$a$900 [0] 4'0001 $memory\memory$rdmux[0][3][0]$a$900 [0] }, B={ $memory\memory$rdmux[0][3][0]$b$901 [0] $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [4] $memory\memory$rdmux[0][3][0]$b$901 [0] 1'1 $memory\memory$rdmux[0][3][0]$b$901 [4] 1'0 $memory\memory$rdmux[0][3][0]$b$901 [0] }, Y={ $memory\memory$rdmux[0][2][0]$a$888 [20] $memory\memory$rdmux[0][2][0]$a$888 [16] $memory\memory$rdmux[0][2][0]$a$888 [13:12] $memory\memory$rdmux[0][2][0]$a$888 [8] $memory\memory$rdmux[0][2][0]$a$888 [4] $memory\memory$rdmux[0][2][0]$a$888 [1:0] }
      New connections: { $memory\memory$rdmux[0][2][0]$a$888 [19:17] $memory\memory$rdmux[0][2][0]$a$888 [15:14] $memory\memory$rdmux[0][2][0]$a$888 [11:9] $memory\memory$rdmux[0][2][0]$a$888 [7:5] $memory\memory$rdmux[0][2][0]$a$888 [3:2] } = { 1'1 $memory\memory$rdmux[0][2][0]$a$888 [12] $memory\memory$rdmux[0][2][0]$a$888 [8] $memory\memory$rdmux[0][2][0]$a$888 [0] $memory\memory$rdmux[0][2][0]$a$888 [1] $memory\memory$rdmux[0][2][0]$a$888 [8] $memory\memory$rdmux[0][2][0]$a$888 [4] $memory\memory$rdmux[0][2][0]$a$888 [4] 1'0 $memory\memory$rdmux[0][2][0]$a$888 [4] 1'0 $memory\memory$rdmux[0][2][0]$a$888 [1:0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$357:
      Old ports: A=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358, B=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347
      New ports: A={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [0] 1'0 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$a$358 [1:0] }, B={ 1'1 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][3]$b$359 [3] 2'00 }, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [4:3] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [1:0] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [6:5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [2] } = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [1] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$b$347 [4] 1'0 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$354:
      Old ports: A=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355, B=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346
      New ports: A={ 2'00 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$a$355 [2] }, B={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][2]$b$356 [3] 1'0 }, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [3:2] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [6] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [1:0] } = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][1]$a$346 [5] 3'000 }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$351:
      Old ports: A=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352, B=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344
      New ports: A={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [3] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$a$352 [3] 2'10 }, B={ 1'0 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][1]$b$353 [0] }, Y={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [6:5] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [3:2] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [0] }
      New connections: { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [4] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [1] } = { 1'0 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$b$344 [0] }
    Consolidated identical input bits for $mux cell $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$348:
      Old ports: A=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349, B=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$a$343
      New ports: A={ 1'0 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$a$349 [1] 1'1 }, B={ $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [4] 1'0 $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][2][0]$b$350 [2] 2'10 }, Y=$memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$a$343 [4:0]
      New connections: $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$a$343 [6:5] = { $memory$flatten\ssd.$auto$proc_rom.cc:150:do_switch$104$rdmux[0][1][0]$a$343 [3] 1'0 }
  Optimizing cells in module \cpu.
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][2][2]$893:
      Old ports: A=$memory\memory$rdmux[0][2][2]$a$894, B=$memory\memory$rdmux[0][2][2]$b$895, Y=$memory\memory$rdmux[0][1][1]$a$885
      New ports: A={ 1'1 $memory\memory$rdmux[0][2][2]$a$894 [14] $memory\memory$rdmux[0][2][2]$a$894 [14:13] $memory\memory$rdmux[0][2][2]$a$894 [11:9] 1'0 $memory\memory$rdmux[0][2][2]$a$894 [5] $memory\memory$rdmux[0][2][2]$a$894 [5] 2'00 $memory\memory$rdmux[0][2][2]$a$894 [0] }, B={ $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [0] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [4] $memory\memory$rdmux[0][2][2]$b$895 [1:0] }, Y={ $memory\memory$rdmux[0][1][1]$a$885 [19] $memory\memory$rdmux[0][1][1]$a$885 [15:13] $memory\memory$rdmux[0][1][1]$a$885 [11:8] $memory\memory$rdmux[0][1][1]$a$885 [6:4] $memory\memory$rdmux[0][1][1]$a$885 [1:0] }
      New connections: { $memory\memory$rdmux[0][1][1]$a$885 [20] $memory\memory$rdmux[0][1][1]$a$885 [18:16] $memory\memory$rdmux[0][1][1]$a$885 [12] $memory\memory$rdmux[0][1][1]$a$885 [7] $memory\memory$rdmux[0][1][1]$a$885 [3:2] } = { $memory\memory$rdmux[0][1][1]$a$885 [0] $memory\memory$rdmux[0][1][1]$a$885 [1] $memory\memory$rdmux[0][1][1]$a$885 [4] $memory\memory$rdmux[0][1][1]$a$885 [5:4] $memory\memory$rdmux[0][1][1]$a$885 [5] $memory\memory$rdmux[0][1][1]$a$885 [1] $memory\memory$rdmux[0][1][1]$a$885 [1] }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][2][1]$890:
      Old ports: A=21'000000000000000000000, B=$memory\memory$rdmux[0][2][1]$b$892, Y=$memory\memory$rdmux[0][1][0]$b$883
      New ports: A=8'00000000, B={ $memory\memory$rdmux[0][2][1]$b$892 [20:19] 1'1 $memory\memory$rdmux[0][2][1]$b$892 [14:13] $memory\memory$rdmux[0][2][1]$b$892 [2:0] }, Y={ $memory\memory$rdmux[0][1][0]$b$883 [20:19] $memory\memory$rdmux[0][1][0]$b$883 [15:13] $memory\memory$rdmux[0][1][0]$b$883 [2:0] }
      New connections: { $memory\memory$rdmux[0][1][0]$b$883 [18:16] $memory\memory$rdmux[0][1][0]$b$883 [12:3] } = { 3'000 $memory\memory$rdmux[0][1][0]$b$883 [1] 1'0 $memory\memory$rdmux[0][1][0]$b$883 [1] 2'00 $memory\memory$rdmux[0][1][0]$b$883 [1] 1'0 $memory\memory$rdmux[0][1][0]$b$883 [1] 2'00 }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][2][0]$887:
      Old ports: A=$memory\memory$rdmux[0][2][0]$a$888, B=$memory\memory$rdmux[0][2][0]$b$889, Y=$memory\memory$rdmux[0][1][0]$a$882
      New ports: A={ $memory\memory$rdmux[0][2][0]$a$888 [20] 1'1 $memory\memory$rdmux[0][2][0]$a$888 [12] $memory\memory$rdmux[0][2][0]$a$888 [8] $memory\memory$rdmux[0][2][0]$a$888 [16] $memory\memory$rdmux[0][2][0]$a$888 [0] $memory\memory$rdmux[0][2][0]$a$888 [1] $memory\memory$rdmux[0][2][0]$a$888 [13:12] $memory\memory$rdmux[0][2][0]$a$888 [4] $memory\memory$rdmux[0][2][0]$a$888 [8] 1'0 $memory\memory$rdmux[0][2][0]$a$888 [4] $memory\memory$rdmux[0][2][0]$a$888 [1:0] $memory\memory$rdmux[0][2][0]$a$888 [1:0] }, B={ $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [1] $memory\memory$rdmux[0][2][0]$b$889 [2] $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [5] $memory\memory$rdmux[0][2][0]$b$889 [15] $memory\memory$rdmux[0][2][0]$b$889 [5] $memory\memory$rdmux[0][2][0]$b$889 [1] 1'0 $memory\memory$rdmux[0][2][0]$b$889 [5] 1'0 $memory\memory$rdmux[0][2][0]$b$889 [5] 1'0 $memory\memory$rdmux[0][2][0]$b$889 [2] $memory\memory$rdmux[0][2][0]$b$889 [2:1] 1'0 }, Y={ $memory\memory$rdmux[0][1][0]$a$882 [20:12] $memory\memory$rdmux[0][1][0]$a$882 [9:8] $memory\memory$rdmux[0][1][0]$a$882 [5:0] }
      New connections: { $memory\memory$rdmux[0][1][0]$a$882 [11:10] $memory\memory$rdmux[0][1][0]$a$882 [7:6] } = { $memory\memory$rdmux[0][1][0]$a$882 [8] $memory\memory$rdmux[0][1][0]$a$882 [4] $memory\memory$rdmux[0][1][0]$a$882 [5:4] }
  Optimizing cells in module \cpu.
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][1][1]$884:
      Old ports: A=$memory\memory$rdmux[0][1][1]$a$885, B=21'x, Y=$memory\memory$rdmux[0][0][0]$b$880
      New ports: A={ $memory\memory$rdmux[0][1][1]$a$885 [19] $memory\memory$rdmux[0][1][1]$a$885 [15:13] $memory\memory$rdmux[0][1][1]$a$885 [11:8] $memory\memory$rdmux[0][1][1]$a$885 [6:4] $memory\memory$rdmux[0][1][1]$a$885 [1:0] }, B=13'x, Y={ $memory\memory$rdmux[0][0][0]$b$880 [19] $memory\memory$rdmux[0][0][0]$b$880 [15:13] $memory\memory$rdmux[0][0][0]$b$880 [11:8] $memory\memory$rdmux[0][0][0]$b$880 [6:4] $memory\memory$rdmux[0][0][0]$b$880 [1:0] }
      New connections: { $memory\memory$rdmux[0][0][0]$b$880 [20] $memory\memory$rdmux[0][0][0]$b$880 [18:16] $memory\memory$rdmux[0][0][0]$b$880 [12] $memory\memory$rdmux[0][0][0]$b$880 [7] $memory\memory$rdmux[0][0][0]$b$880 [3:2] } = { $memory\memory$rdmux[0][0][0]$b$880 [0] $memory\memory$rdmux[0][0][0]$b$880 [1] $memory\memory$rdmux[0][0][0]$b$880 [4] $memory\memory$rdmux[0][0][0]$b$880 [5:4] $memory\memory$rdmux[0][0][0]$b$880 [5] $memory\memory$rdmux[0][0][0]$b$880 [1] $memory\memory$rdmux[0][0][0]$b$880 [1] }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][1][0]$881:
      Old ports: A=$memory\memory$rdmux[0][1][0]$a$882, B=$memory\memory$rdmux[0][1][0]$b$883, Y=$memory\memory$rdmux[0][0][0]$a$879
      New ports: A={ $memory\memory$rdmux[0][1][0]$a$882 [20:12] $memory\memory$rdmux[0][1][0]$a$882 [4] $memory\memory$rdmux[0][1][0]$a$882 [9:8] $memory\memory$rdmux[0][1][0]$a$882 [5:0] }, B={ $memory\memory$rdmux[0][1][0]$b$883 [20:19] 3'000 $memory\memory$rdmux[0][1][0]$b$883 [15:13] $memory\memory$rdmux[0][1][0]$b$883 [1] $memory\memory$rdmux[0][1][0]$b$883 [1] 2'00 $memory\memory$rdmux[0][1][0]$b$883 [1] 2'00 $memory\memory$rdmux[0][1][0]$b$883 [2:0] }, Y={ $memory\memory$rdmux[0][0][0]$a$879 [20:12] $memory\memory$rdmux[0][0][0]$a$879 [10:8] $memory\memory$rdmux[0][0][0]$a$879 [5:0] }
      New connections: { $memory\memory$rdmux[0][0][0]$a$879 [11] $memory\memory$rdmux[0][0][0]$a$879 [7:6] } = { $memory\memory$rdmux[0][0][0]$a$879 [8] $memory\memory$rdmux[0][0][0]$a$879 [5:4] }
  Optimizing cells in module \cpu.
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][0][0]$878:
      Old ports: A=$memory\memory$rdmux[0][0][0]$a$879, B=$memory\memory$rdmux[0][0][0]$b$880, Y=$\memory$rdreg[0]$d
      New ports: A={ $memory\memory$rdmux[0][0][0]$a$879 [20:12] $memory\memory$rdmux[0][0][0]$a$879 [8] $memory\memory$rdmux[0][0][0]$a$879 [10:8] $memory\memory$rdmux[0][0][0]$a$879 [4] $memory\memory$rdmux[0][0][0]$a$879 [5:0] }, B={ $memory\memory$rdmux[0][0][0]$b$880 [0] $memory\memory$rdmux[0][0][0]$b$880 [19] $memory\memory$rdmux[0][0][0]$b$880 [1] $memory\memory$rdmux[0][0][0]$b$880 [4] $memory\memory$rdmux[0][0][0]$b$880 [5] $memory\memory$rdmux[0][0][0]$b$880 [15:13] $memory\memory$rdmux[0][0][0]$b$880 [4] $memory\memory$rdmux[0][0][0]$b$880 [11:8] $memory\memory$rdmux[0][0][0]$b$880 [6:4] $memory\memory$rdmux[0][0][0]$b$880 [1] $memory\memory$rdmux[0][0][0]$b$880 [1] $memory\memory$rdmux[0][0][0]$b$880 [1:0] }, Y={ $\memory$rdreg[0]$d [20:8] $\memory$rdreg[0]$d [6:0] }
      New connections: $\memory$rdreg[0]$d [7] = $\memory$rdreg[0]$d [5]
  Optimizing cells in module \cpu.
Performed a total of 33 changes.

41.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~30 debug messages>
Removed a total of 10 cells.

41.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $flatten\decoder.$procmux$157 in front of them:
        $auto$alumacc.cc:485:replace_alu$315
        $auto$alumacc.cc:485:replace_alu$304
        $auto$alumacc.cc:485:replace_alu$307

41.7. Executing OPT_DFF pass (perform DFF optimizations).

41.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 179 unused wires.
<suppressed ~1 debug messages>

41.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~5 debug messages>

41.10. Rerunning OPT passes. (Maybe there is more to do..)

41.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~47 debug messages>

41.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
    New ctrl vector for $pmux cell $flatten\decoder.$procmux$157: { $flatten\decoder.$procmux$132_CMP $flatten\decoder.$procmux$131_CMP $flatten\decoder.$procmux$130_CMP }
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][2][2]$893:
      Old ports: A={ 1'1 $memory\memory$rdmux[0][2][2]$a$894 [15] $memory\memory$rdmux[0][2][2]$a$894 [15] $memory\memory$rdmux[0][2][2]$a$894 [13] $memory\memory$rdmux[0][2][2]$a$894 [11:9] 1'0 $memory\memory$rdmux[0][2][2]$a$894 [16] $memory\memory$rdmux[0][2][2]$a$894 [16] 2'00 $memory\memory$rdmux[0][2][2]$a$894 [20] }, B={ $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [17] $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [17] $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [17] $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [20] $memory\memory$rdmux[0][2][2]$b$895 [17] $memory\memory$rdmux[0][2][2]$b$895 [17] $memory\memory$rdmux[0][2][2]$b$895 [18] $memory\memory$rdmux[0][2][2]$b$895 [20] }, Y={ $memory\memory$rdmux[0][1][1]$a$885 [19] $memory\memory$rdmux[0][1][1]$a$885 [15:13] $memory\memory$rdmux[0][1][1]$a$885 [11:8] $memory\memory$rdmux[0][1][1]$a$885 [6] $memory\memory$rdmux[0][1][1]$a$885 [16] $memory\memory$rdmux[0][1][1]$a$885 [17] $memory\memory$rdmux[0][1][1]$a$885 [18] $memory\memory$rdmux[0][1][1]$a$885 [20] }
      New ports: A={ 1'1 $memory\memory$rdmux[0][2][2]$a$894 [15] $memory\memory$rdmux[0][2][2]$a$894 [15] $memory\memory$rdmux[0][2][2]$a$894 [13] $memory\memory$rdmux[0][2][2]$a$894 [11:9] 1'0 $memory\memory$rdmux[0][2][2]$a$894 [16] $memory\memory$rdmux[0][2][2]$a$894 [16] 1'0 $memory\memory$rdmux[0][2][2]$a$894 [20] }, B={ $memory\memory$rdmux[0][3][1]$a$903 [20] $memory\memory$rdmux[0][3][1]$a$903 [20] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [20] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [20] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [20] $memory\memory$rdmux[0][3][1]$a$903 [20] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [20] }, Y={ $memory\memory$rdmux[0][1][1]$a$885 [19] $memory\memory$rdmux[0][1][1]$a$885 [15:13] $memory\memory$rdmux[0][1][1]$a$885 [11:8] $memory\memory$rdmux[0][1][1]$a$885 [6] $memory\memory$rdmux[0][1][1]$a$885 [16] $memory\memory$rdmux[0][1][1]$a$885 [18] $memory\memory$rdmux[0][1][1]$a$885 [20] }
      New connections: $memory\memory$rdmux[0][1][1]$a$885 [17] = 1'0
    Consolidated identical input bits for $mux cell $memory\memory$rdmux[0][3][3]$908:
      Old ports: A={ $memory\memory$rdmux[0][3][1]$a$903 [20] 2'10 $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [20] 2'00 }, B={ $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [18] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [20] $memory\memory$rdmux[0][3][1]$a$903 [20] 1'1 }, Y={ $memory\memory$rdmux[0][2][1]$b$892 [20:19] $memory\memory$rdmux[0][2][1]$b$892 [14:13] $memory\memory$rdmux[0][2][1]$b$892 [2] $memory\memory$rdmux[0][2][1]$b$892 [12] $memory\memory$rdmux[0][2][1]$b$892 [0] }
      New ports: A={ $memory\memory$rdmux[0][3][1]$a$903 [20] 2'10 $memory\memory$rdmux[0][3][1]$a$903 [18] 2'00 }, B={ $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [18] $memory\memory$rdmux[0][3][1]$a$903 [18] 1'0 $memory\memory$rdmux[0][3][1]$a$903 [20] 1'1 }, Y={ $memory\memory$rdmux[0][2][1]$b$892 [20:19] $memory\memory$rdmux[0][2][1]$b$892 [14:12] $memory\memory$rdmux[0][2][1]$b$892 [0] }
      New connections: $memory\memory$rdmux[0][2][1]$b$892 [2] = $memory\memory$rdmux[0][3][1]$a$903 [20]
  Optimizing cells in module \cpu.
Performed a total of 3 changes.

41.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

41.14. Executing OPT_SHARE pass.

41.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\decoder.rf.ram[9]$402 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[9]).
Adding EN signal on $memory\decoder.rf.ram[8]$400 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[8]).
Adding EN signal on $memory\decoder.rf.ram[7]$398 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[7]).
Adding EN signal on $memory\decoder.rf.ram[6]$396 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[6]).
Adding EN signal on $memory\decoder.rf.ram[5]$394 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[5]).
Adding EN signal on $memory\decoder.rf.ram[4]$392 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[4]).
Adding EN signal on $memory\decoder.rf.ram[3]$390 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[3]).
Adding EN signal on $memory\decoder.rf.ram[31]$446 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[31]).
Adding EN signal on $memory\decoder.rf.ram[30]$444 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[30]).
Adding EN signal on $memory\decoder.rf.ram[2]$388 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[2]).
Adding EN signal on $memory\decoder.rf.ram[29]$442 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[29]).
Adding EN signal on $memory\decoder.rf.ram[28]$440 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[28]).
Adding EN signal on $memory\decoder.rf.ram[27]$438 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[27]).
Adding EN signal on $memory\decoder.rf.ram[26]$436 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[26]).
Adding EN signal on $memory\decoder.rf.ram[25]$434 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[25]).
Adding EN signal on $memory\decoder.rf.ram[24]$432 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[24]).
Adding EN signal on $memory\decoder.rf.ram[23]$430 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[23]).
Adding EN signal on $memory\decoder.rf.ram[22]$428 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[22]).
Adding EN signal on $memory\decoder.rf.ram[21]$426 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[21]).
Adding EN signal on $memory\decoder.rf.ram[20]$424 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[20]).
Adding EN signal on $memory\decoder.rf.ram[1]$386 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[1]).
Adding EN signal on $memory\decoder.rf.ram[19]$422 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[19]).
Adding EN signal on $memory\decoder.rf.ram[18]$420 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[18]).
Adding EN signal on $memory\decoder.rf.ram[17]$418 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[17]).
Adding EN signal on $memory\decoder.rf.ram[16]$416 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[16]).
Adding EN signal on $memory\decoder.rf.ram[15]$414 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[15]).
Adding EN signal on $memory\decoder.rf.ram[14]$412 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[14]).
Adding EN signal on $memory\decoder.rf.ram[13]$410 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[13]).
Adding EN signal on $memory\decoder.rf.ram[12]$408 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[12]).
Adding EN signal on $memory\decoder.rf.ram[11]$406 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[11]).
Adding EN signal on $memory\decoder.rf.ram[10]$404 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[10]).
Adding EN signal on $memory\decoder.rf.ram[0]$384 ($dff) from module cpu (D = \decoder.wd3, Q = \decoder.rf.ram[0]).
Setting constant 0-bit at position 0 on $\decoder.rf.ram$rdreg[1] ($dff) from module cpu.

41.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 32 unused cells and 36 unused wires.
<suppressed ~33 debug messages>

41.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~16 debug messages>

41.18. Rerunning OPT passes. (Maybe there is more to do..)

41.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

41.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

41.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

41.22. Executing OPT_SHARE pass.

41.23. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $\memory$rdreg[0] ($dff) from module cpu (D = $memory\memory$rdmux[0][1][0]$a$882 [17], Q = \decoder.inst [28], rval = 1'0).
Adding SRST signal on $\memory$rdreg[0] ($dff) from module cpu (D = { $memory\memory$rdmux[0][0][0]$a$879 [12] $memory\memory$rdmux[0][0][0]$a$879 [6] }, Q = { \decoder.inst [23] \decoder.inst [15] }, rval = 2'00).

41.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 16 unused wires.
<suppressed ~1 debug messages>

41.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

41.26. Rerunning OPT passes. (Maybe there is more to do..)

41.27. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~17 debug messages>

41.28. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

41.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

41.30. Executing OPT_SHARE pass.

41.31. Executing OPT_DFF pass (perform DFF optimizations).

41.32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

41.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

41.34. Finished OPT passes. (There is nothing left to do.)

42. Executing TECHMAP pass (map to technology primitives).

42.1. Executing Verilog-2005 frontend: /nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nix/store/sx2v0i73mn1ih2z1nk61pm9n5gjgpidy-yosys/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

42.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $and.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=0:A_WIDTH=32:Y_WIDTH=32:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$672a140277c71df8314410f22acc08d55222c3c7\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $sdffe.
Using template $paramod$8fabc56b80a569262acfc42757a02ca0b8e91278\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $logic_and.
Using extmapper simplemap for cells of type $logic_not.
Using template $paramod$c5c783b17ab1d780abfad8cfe6563a0a7b47a3b0\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $ne.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$56955d0f36f77738c952d3505dc563df3ee11b94\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:b9a86d073741c2a0f7bb241e73c2dd11747f3288$paramod$dce7c1188cb25d2520d170426d59301c3b73f9e7\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$fbc7873bff55778c0b3173955b7e4bce1d9d6834\_90_alu for cells of type $alu.
Using template $paramod$54d740639e1393b22262823179ff783ea9f17a35\_90_pmux for cells of type $pmux.
Using template $paramod$c6baa65225090ac0a120feab1b920965244aa496\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000000101 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100000 for cells of type $lcu.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~2236 debug messages>

43. Executing OPT pass (performing simple optimizations).

43.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~701 debug messages>

43.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~546 debug messages>
Removed a total of 182 cells.

43.3. Executing OPT_DFF pass (perform DFF optimizations).

43.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 42 unused cells and 702 unused wires.
<suppressed ~43 debug messages>

43.5. Finished fast OPT passes.

44. Executing ABC pass (technology mapping using ABC).

44.1. Extracting gate netlist of module `\cpu' to `<abc-temp-dir>/input.blif'..
Extracted 3175 gates and 4255 wires to a netlist network with 1078 inputs and 113 outputs.

44.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

44.1.2. Re-integrating ABC results.
ABC RESULTS:              XNOR cells:       63
ABC RESULTS:               XOR cells:      105
ABC RESULTS:               MUX cells:     1869
ABC RESULTS:               NOR cells:       57
ABC RESULTS:               AND cells:       38
ABC RESULTS:               NOT cells:       51
ABC RESULTS:             ORNOT cells:       28
ABC RESULTS:              NAND cells:       74
ABC RESULTS:                OR cells:      387
ABC RESULTS:            ANDNOT cells:      421
ABC RESULTS:        internal signals:     3064
ABC RESULTS:           input signals:     1078
ABC RESULTS:          output signals:      113
Removing temp directory.

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.
<suppressed ~732 debug messages>

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
<suppressed ~21 debug messages>
Removed a total of 7 cells.

45.3. Executing OPT_DFF pass (perform DFF optimizations).

45.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 9 unused cells and 1627 unused wires.
<suppressed ~14 debug messages>

45.5. Finished fast OPT passes.

46. Executing HIERARCHY pass (managing design hierarchy).

46.1. Analyzing design hierarchy..
Top module:  \cpu

46.2. Analyzing design hierarchy..
Top module:  \cpu
Removed 0 unused modules.

47. Printing statistics.

=== cpu ===

   Number of wires:               3095
   Number of wire bits:           4415
   Number of public wires:          69
   Number of public wire bits:    1324
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4197
     $_ANDNOT_                     417
     $_AND_                         38
     $_DFFE_PP_                   1077
     $_DFF_P_                       32
     $_MUX_                       1869
     $_NAND_                        74
     $_NOR_                         57
     $_NOT_                         42
     $_ORNOT_                       27
     $_OR_                         385
     $_SDFFE_PP0N_                   5
     $_SDFFE_PP0P_                   2
     $_SDFF_PP0_                     4
     $_XNOR_                        63
     $_XOR_                        105

48. Executing CHECK pass (checking for obvious problems).
Checking module cpu...
Found and reported 0 problems.

49. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/post_techmap.dot'.
Dumping module cpu to page 1.

50. Executing SHARE pass (SAT-based resource sharing).

51. Executing OPT pass (performing simple optimizations).

51.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

51.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

51.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \cpu..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

51.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \cpu.
Performed a total of 0 changes.

51.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\cpu'.
Removed a total of 0 cells.

51.6. Executing OPT_DFF pass (perform DFF optimizations).

51.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..

51.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module cpu.

51.9. Finished OPT passes. (There is nothing left to do.)

52. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 0 unused cells and 21 unused wires.
<suppressed ~21 debug messages>

53. Printing statistics.

=== cpu ===

   Number of wires:               3074
   Number of wire bits:           4237
   Number of public wires:          48
   Number of public wire bits:    1146
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               4197
     $_ANDNOT_                     417
     $_AND_                         38
     $_DFFE_PP_                   1077
     $_DFF_P_                       32
     $_MUX_                       1869
     $_NAND_                        74
     $_NOR_                         57
     $_NOT_                         42
     $_ORNOT_                       27
     $_OR_                         385
     $_SDFFE_PP0N_                   5
     $_SDFFE_PP0P_                   2
     $_SDFF_PP0_                     4
     $_XNOR_                        63
     $_XOR_                        105

mapping tbuf

54. Executing TECHMAP pass (map to technology primitives).

54.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

54.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

55. Executing SIMPLEMAP pass (map simple cells to gate primitives).

56. Executing TECHMAP pass (map to technology primitives).

56.1. Executing Verilog-2005 frontend: /root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/root/.volare/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

56.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

57. Executing SIMPLEMAP pass (map simple cells to gate primitives).

58. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

58.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\cpu':
  mapped 1120 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

59. Printing statistics.

=== cpu ===

   Number of wires:               4169
   Number of wire bits:           5332
   Number of public wires:          48
   Number of public wire bits:    1146
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5292
     $_ANDNOT_                     417
     $_AND_                         38
     $_MUX_                       2964
     $_NAND_                        74
     $_NOR_                         57
     $_NOT_                         42
     $_ORNOT_                       27
     $_OR_                         385
     $_XNOR_                        63
     $_XOR_                        105
     sky130_fd_sc_hd__dfxtp_2     1120

[INFO]: USING STRATEGY AREA 0

60. Executing ABC pass (technology mapping using ABC).

60.1. Extracting gate netlist of module `\cpu' to `/tmp/yosys-abc-Ha8btN/input.blif'..
Extracted 4172 gates and 5288 wires to a netlist network with 1115 inputs and 1120 outputs.

60.1.1. Executing ABC.
Running ABC command: "/nix/store/wq2q0njg3sx8wvj2akz7x1qxwyrv9xlr-yosys-abc/bin/abc" -s -f /tmp/yosys-abc-Ha8btN/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-Ha8btN/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-Ha8btN/input.blif 
ABC: + read_lib -w /openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.03 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.04 sec
ABC: Memory =    9.54 MB. Time =     0.04 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/cpu/runs/RUN_2025.06.08_22.25.43/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + retime -D -D 10000 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + drw -l 
ABC: + drf -l 
ABC: + balance 
ABC: + drw -l 
ABC: + drw -l -z 
ABC: + balance 
ABC: + drf -l -z 
ABC: + drw -l -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000 
ABC: Current delay (6405.71 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =   4457 ( 34.4 %)   Cap = 11.8 ff ( 12.1 %)   Area =    38370.55 ( 58.4 %)   Delay =  7620.17 ps  (  7.0 %)               
ABC: Path  0 --      45 : 0    4 pi                        A =   0.00  Df =  30.0  -16.9 ps  S =  47.2 ps  Cin =  0.0 ff  Cout =   8.8 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --    2251 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df = 517.4 -234.4 ps  S = 634.0 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  2 --    2252 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1043.3 -405.4 ps  S = 588.6 ps  Cin =  2.1 ff  Cout =  50.5 ff  Cmax = 130.0 ff  G = 2274  
ABC: Path  3 --    2253 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =1538.0 -564.1 ps  S = 548.3 ps  Cin =  2.1 ff  Cout =  46.9 ff  Cmax = 130.0 ff  G = 2115  
ABC: Path  4 --    2297 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2086.4 -756.6 ps  S = 629.8 ps  Cin =  2.1 ff  Cout =  54.1 ff  Cmax = 130.0 ff  G = 2434  
ABC: Path  5 --    2298 : 1   10 sky130_fd_sc_hd__buf_1    A =   3.75  Df =2668.2 -957.8 ps  S = 670.5 ps  Cin =  2.1 ff  Cout =  57.7 ff  Cmax = 130.0 ff  G = 2593  
ABC: Path  6 --    2301 : 6    1 sky130_fd_sc_hd__mux4_2   A =  22.52  Df =3211.2 -969.7 ps  S =  75.9 ps  Cin =  2.6 ff  Cout =   2.0 ff  Cmax = 301.2 ff  G =   71  
ABC: Path  7 --    2303 : 3    1 sky130_fd_sc_hd__mux2_2   A =  11.26  Df =3358.7 -840.0 ps  S =  55.1 ps  Cin =  2.3 ff  Cout =   5.1 ff  Cmax = 297.6 ff  G =  213  
ABC: Path  8 --    2310 : 3    2 sky130_fd_sc_hd__a21oi_2  A =   8.76  Df =3414.7 -743.7 ps  S = 117.4 ps  Cin =  4.6 ff  Cout =   6.2 ff  Cmax = 128.2 ff  G =  130  
ABC: Path  9 --    3654 : 3    7 sky130_fd_sc_hd__nor3_2   A =  10.01  Df =3911.8-1129.7 ps  S = 547.8 ps  Cin =  4.4 ff  Cout =  31.5 ff  Cmax =  92.5 ff  G =  696  
ABC: Path 10 --    5480 : 4    2 sky130_fd_sc_hd__a2bb2o_2 A =  11.26  Df =4254.8-1168.9 ps  S =  51.1 ps  Cin =  1.7 ff  Cout =   5.1 ff  Cmax = 300.3 ff  G =  275  
ABC: Path 11 --    5549 : 5    1 sky130_fd_sc_hd__a311o_2  A =  11.26  Df =4638.2-1381.9 ps  S =  58.6 ps  Cin =  2.3 ff  Cout =   4.7 ff  Cmax = 298.5 ff  G =  192  
ABC: Path 12 --    5550 : 4    2 sky130_fd_sc_hd__a31oi_2  A =  12.51  Df =4775.1 -297.5 ps  S = 123.7 ps  Cin =  4.4 ff  Cout =   3.3 ff  Cmax = 118.1 ff  G =   72  
ABC: Path 13 --    5551 : 2    5 sky130_fd_sc_hd__and2b_2  A =   8.76  Df =5035.7 -305.2 ps  S =  89.0 ps  Cin =  1.6 ff  Cout =  14.7 ff  Cmax = 310.4 ff  G =  872  
ABC: Path 14 --    5668 : 3    5 sky130_fd_sc_hd__a21bo_2  A =  10.01  Df =5285.9 -373.4 ps  S =  98.3 ps  Cin =  2.0 ff  Cout =  16.0 ff  Cmax = 288.4 ff  G =  751  
ABC: Path 15 --    5974 : 3    1 sky130_fd_sc_hd__a21o_2   A =   8.76  Df =5493.2 -455.4 ps  S =  32.4 ps  Cin =  2.4 ff  Cout =   2.5 ff  Cmax = 309.5 ff  G =  101  
ABC: Path 16 --    5978 : 4    2 sky130_fd_sc_hd__a211o_2  A =  10.01  Df =5822.8 -661.0 ps  S =  56.6 ps  Cin =  2.4 ff  Cout =   6.3 ff  Cmax = 325.0 ff  G =  250  
ABC: Path 17 --    5979 : 2    4 sky130_fd_sc_hd__and2_2   A =   7.51  Df =6041.0 -707.4 ps  S =  85.9 ps  Cin =  1.5 ff  Cout =  13.3 ff  Cmax = 303.0 ff  G =  860  
ABC: Path 18 --    6070 : 5    2 sky130_fd_sc_hd__a2111o_2 A =  12.51  Df =6515.0-1033.6 ps  S =  71.8 ps  Cin =  2.4 ff  Cout =   6.1 ff  Cmax = 324.1 ff  G =  241  
ABC: Path 19 --    6071 : 2    2 sky130_fd_sc_hd__nand2_2  A =   6.26  Df =6591.0-1060.4 ps  S =  48.7 ps  Cin =  4.4 ff  Cout =   4.9 ff  Cmax = 295.7 ff  G =  106  
ABC: Path 20 --    6091 : 3    3 sky130_fd_sc_hd__o21a_2   A =   8.76  Df =6756.9-1082.7 ps  S =  93.4 ps  Cin =  2.4 ff  Cout =  15.5 ff  Cmax = 294.8 ff  G =  628  
ABC: Path 21 --    6129 : 4    2 sky130_fd_sc_hd__a211oi_2 A =  12.51  Df =6839.9 -906.3 ps  S = 213.3 ps  Cin =  4.4 ff  Cout =   7.2 ff  Cmax =  88.8 ff  G =  155  
ABC: Path 22 --    6131 : 5    1 sky130_fd_sc_hd__o311a_2  A =  11.26  Df =7162.3  -54.8 ps  S =  52.7 ps  Cin =  2.4 ff  Cout =   2.4 ff  Cmax = 293.9 ff  G =   97  
ABC: Path 23 --    6140 : 5    1 sky130_fd_sc_hd__o32a_2   A =  11.26  Df =7620.2 -132.0 ps  S = 180.9 ps  Cin =  2.3 ff  Cout =  33.4 ff  Cmax = 300.3 ff  G = 1451  
ABC: Start-point = pi44 ($\decoder.rf.ram$rdreg[0]$q [1]).  End-point = po859 ($auto$rtlil.cc:2684:MuxGate$12212).
ABC: + print_stats -m 
ABC: netlist                       : i/o = 1115/ 1120  lat =    0  nd =  4457  edge =  11050  area =38366.67  delay =28.00  lev = 28
ABC: + write_blif /tmp/yosys-abc-Ha8btN/output.blif 

60.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:      320
ABC RESULTS:   sky130_fd_sc_hd__a221oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a22oi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2111oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__a311oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o31ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       21
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       12
ABC RESULTS:   sky130_fd_sc_hd__o21bai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:       74
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:       10
ABC RESULTS:   sky130_fd_sc_hd__a311o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       38
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:       41
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or3b_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o31a_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__o311ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:       72
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:      151
ABC RESULTS:   sky130_fd_sc_hd__xnor2_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       52
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       69
ABC RESULTS:   sky130_fd_sc_hd__o311a_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__or2b_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:       29
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       82
ABC RESULTS:   sky130_fd_sc_hd__and3b_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      132
ABC RESULTS:   sky130_fd_sc_hd__nor2b_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:      202
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:     1199
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:     1479
ABC RESULTS:        internal signals:     3053
ABC RESULTS:           input signals:     1115
ABC RESULTS:          output signals:     1120
Removing temp directory.

61. Executing SETUNDEF pass (replace undef values with defined constants).

62. Executing HILOMAP pass (mapping to constant drivers).

63. Executing SPLITNETS pass (splitting up multi-bit signals).

64. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \cpu..
Removed 25 unused cells and 5349 unused wires.
<suppressed ~56 debug messages>

65. Executing INSBUF pass (insert buffer cells for connected wires).

66. Executing CHECK pass (checking for obvious problems).
Checking module cpu...
Found and reported 0 problems.

67. Printing statistics.

=== cpu ===

   Number of wires:               5575
   Number of wire bits:           5581
   Number of public wires:        1110
   Number of public wire bits:    1116
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               5578
     sky130_fd_sc_hd__a2111o_2       4
     sky130_fd_sc_hd__a2111oi_2      1
     sky130_fd_sc_hd__a211o_2       30
     sky130_fd_sc_hd__a211oi_2       5
     sky130_fd_sc_hd__a21bo_2        6
     sky130_fd_sc_hd__a21boi_2       2
     sky130_fd_sc_hd__a21o_2        82
     sky130_fd_sc_hd__a21oi_2       69
     sky130_fd_sc_hd__a221o_2       29
     sky130_fd_sc_hd__a221oi_2       2
     sky130_fd_sc_hd__a22o_2        21
     sky130_fd_sc_hd__a22oi_2        2
     sky130_fd_sc_hd__a2bb2o_2       9
     sky130_fd_sc_hd__a311o_2        6
     sky130_fd_sc_hd__a311oi_2       1
     sky130_fd_sc_hd__a31o_2        29
     sky130_fd_sc_hd__a31oi_2        6
     sky130_fd_sc_hd__a32o_2        10
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__and2_2        74
     sky130_fd_sc_hd__and2b_2       23
     sky130_fd_sc_hd__and3_2        41
     sky130_fd_sc_hd__and3b_2        6
     sky130_fd_sc_hd__and4_2         8
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1       1479
     sky130_fd_sc_hd__conb_1         1
     sky130_fd_sc_hd__dfxtp_2     1120
     sky130_fd_sc_hd__inv_2         52
     sky130_fd_sc_hd__mux2_2      1199
     sky130_fd_sc_hd__mux4_2       320
     sky130_fd_sc_hd__nand2_2      132
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2        9
     sky130_fd_sc_hd__nand3b_2       2
     sky130_fd_sc_hd__nand4_2        1
     sky130_fd_sc_hd__nand4b_2       1
     sky130_fd_sc_hd__nor2_2       202
     sky130_fd_sc_hd__nor2b_2        4
     sky130_fd_sc_hd__nor3_2         6
     sky130_fd_sc_hd__nor4_2         1
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o211a_2       72
     sky130_fd_sc_hd__o211ai_2       6
     sky130_fd_sc_hd__o21a_2        69
     sky130_fd_sc_hd__o21ai_2       69
     sky130_fd_sc_hd__o21ba_2       10
     sky130_fd_sc_hd__o21bai_2       2
     sky130_fd_sc_hd__o221a_2        9
     sky130_fd_sc_hd__o221ai_2       1
     sky130_fd_sc_hd__o22a_2        18
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2       5
     sky130_fd_sc_hd__o311a_2        6
     sky130_fd_sc_hd__o311ai_2       1
     sky130_fd_sc_hd__o31a_2        24
     sky130_fd_sc_hd__o31ai_2        1
     sky130_fd_sc_hd__o32a_2        11
     sky130_fd_sc_hd__o41a_2         1
     sky130_fd_sc_hd__or2_2        151
     sky130_fd_sc_hd__or2b_2        11
     sky130_fd_sc_hd__or3_2         38
     sky130_fd_sc_hd__or3b_2        13
     sky130_fd_sc_hd__or4_2         12
     sky130_fd_sc_hd__or4b_2         1
     sky130_fd_sc_hd__or4bb_2        1
     sky130_fd_sc_hd__xnor2_2       32
     sky130_fd_sc_hd__xor2_2        13

   Chip area for module '\cpu': 62197.152000

68. Executing Verilog backend.
Dumping module `\cpu'.

69. Executing JSON backend.

End of script. Logfile hash: 6e22890c21, CPU: user 0.96s system 0.06s, MEM: 47.19 MB peak
Yosys 0.38 (git sha1 543faed9c8c, clang++ 17.0.6 -fPIC -Os)
Time spent: 86% 2x abc (6 sec), 2% 32x opt_expr (0 sec), ...
